
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report


# turkish_spam_dataset.csv dosyasÄ±, create_tr_dataset_for_spam_filtering.py dosyasÄ± kullanÄ±larak bu Ã§alÄ±ÅŸma iÃ§in oluÅŸturulmuÅŸtur.

# Veri setini yÃ¼kleme
save_path = "2-Basic Statistics_and_Bayesian Models/turkish_spam_dataset.csv"
data = pd.read_csv(save_path)  # Veri setinin yolunu belirtin

# Ã–zellikler ve etiketler
X = data['text']  # E-posta metinleri
y = data['label']  # Etiketler: 1 = Spam, 0 = Normal

# EÄŸitim ve test verilerine ayÄ±rma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# TF-IDF vektÃ¶rizasyonu
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)


# NaÃ¯ve Bayes modelini oluÅŸturma ve eÄŸitme
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)


# Test verileri Ã¼zerinde tahmin yapma
y_pred = model.predict(X_test_tfidf)


# SÄ±nÄ±flandÄ±rma raporu
print("\nSÄ±nÄ±flandÄ±rma Raporu:")
print(classification_report(y_test, y_pred))


while True:
    user_email = input("\nTest etmek iÃ§in bir text girin (Ã‡Ä±kmak iÃ§in 'q' tuÅŸlayÄ±n): ")
    if user_email.lower() == 'q':
        print("Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±yor...")
        break

    user_email_tfidf = vectorizer.transform([user_email])
    prediction = model.predict(user_email_tfidf)[0]

    if prediction == 1:
        print("Bu e-posta **SPAM** olabilir! ðŸš¨")
    else:
        print("Bu e-posta **Normal** gÃ¶rÃ¼nÃ¼yor. âœ…")

# CIKTI
# tebrikler-->normal
# fÄ±rsatÄ± kaÃ§Ä±rmayÄ±n-->spam
# Ã§ekiliÅŸi kazandÄ±nÄ±-->normal
