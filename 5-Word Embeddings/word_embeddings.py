

# Kodun AmacÄ±: 

# KullanÄ±cÄ± tarafÄ±ndan seÃ§ilen kelime gÃ¶mme modeli (Word2Vec, GloVe, FastText) ile:
# Kelime Ã§iftlerinin model tarafÄ±ndan tahmin edilen benzerliÄŸini (cosine similarity)
# Ä°nsan anotasyonlarÄ± tarafÄ±ndan verilmiÅŸ olan gerÃ§ek benzerlik (Sim) ve iliÅŸkililik (Rel) skorlarÄ±yla karÅŸÄ±laÅŸtÄ±rmak.


# Bu kod ne yapÄ±yor?

# Anlamver veri setindeki kelime Ã§iftlerinin her biri, seÃ§ilen kelime gÃ¶mme modeli tarafÄ±ndan iÅŸlenir, 
# kelime gÃ¶mme modelinde bulunan kelime Ã§iftleri iÃ§in benzerlik skorlarÄ±(cosine similarity => -1 ile 1 arasÄ±nda) hesaplanÄ±r
# bu skorlar ile anlamver veri setindeki insan/gerÃ§ek anotasyonlarÄ± tarafÄ±ndan verilmiÅŸ olan gerÃ§ek benzerlik (Sim) ve iliÅŸkililik (Rel) skorlarÄ±
# Spearman korelasyonu kullanarak karÅŸÄ±laÅŸtÄ±rÄ±lÄ±r.


# Neden Spearman korelasyonu kullanÄ±lÄ±yor?

# 1. Ã–lÃ§ek UyuÅŸmazlÄ±ÄŸÄ± ve DaÄŸÄ±lÄ±msal VarsayÄ±mlar
# 2. Model ve Ä°nsan AlgÄ±sÄ± ArasÄ±ndaki SÄ±ralama TutarlÄ±lÄ±ÄŸÄ±nÄ± Ã–lÃ§me

# Spearman korelasyonu, NLPâ€™deki embedding modellerinin Ã§Ä±ktÄ±larÄ± ile insan anotasyonlarÄ±nÄ±n sÄ±ralama dÃ¼zeyinde ne kadar benzeÅŸtiÄŸini Ã¶lÃ§er. 
# Bu sayede, mutlak skorlarÄ±n karÅŸÄ±laÅŸtÄ±rÄ±lamadÄ±ÄŸÄ± durumlarda bile 
# semantik benzerlikteki gÃ¶reli baÅŸarÄ±yÄ± gÃ¼venilir bir ÅŸekilde deÄŸerlendirmek mÃ¼mkÃ¼n olur.



# Gerekli KÃ¼tÃ¼phanelerin YÃ¼klenmesi

import pandas as pd                         # Veri iÅŸlemek iÃ§in kullanÄ±lÄ±r, CSV dosyasÄ±nÄ± okur ve DataFrame oluÅŸturur.
from gensim.models import KeyedVectors      # Word2Vec, GloVe ve FastText modellerini yÃ¼klemek ve bu modellerle kelime benzerliklerini hesaplamak iÃ§in kullanÄ±lÄ±r.
from scipy.stats import spearmanr           # Spearman korelasyonunu hesaplama


# ----------------------------------------------
# 1. Model (kelime gÃ¶mme modeli) seÃ§imi - KullanÄ±cÄ± etkileÅŸimi ile
# ----------------------------------------------
model_codes = {
    "w": "word2vec",
    "g": "glove",
    "f": "fasttext"
}

while True:
    user_input = input("Model seÃ§ (w: Word2Vec, g: GloVe, f: FastText): ").strip().lower()
    if user_input in model_codes:
        model_name = model_codes[user_input]
        break
    else:
        print("GeÃ§ersiz seÃ§im. LÃ¼tfen 'w', 'g' veya 'f' girin.")

# ğŸ”¹ GloVe (glove.42B.300d.zip)

# Veri KÃ¼mesi: Common Crawl (42 milyar kelime)
# Kelime SayÄ±sÄ±: YaklaÅŸÄ±k 1.9 milyon
# BÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harf ayrÄ±mÄ±: Uncased (yani "Apple" ve "apple" aynÄ±dÄ±r)
# VektÃ¶r Boyutu: 300
# Dosya Boyutu: ~1.75 GB
# Bu model, geniÅŸ Ã§apta toplanan web verisi olan Common Crawl Ã¼zerinde eÄŸitilmiÅŸ. GloVe modelleri, kelimeler arasÄ± istatistiksel iliÅŸkileri Ã¶ÄŸrenmekte baÅŸarÄ±lÄ±dÄ±r.

# ğŸ”¹ Word2Vec (GoogleNews-vectors-negative300.bin.gz)
# Veri KÃ¼mesi: Google News (yaklaÅŸÄ±k 100 milyar kelime)
# Kelime ve Ä°fade SayÄ±sÄ±: ~3 milyon
# VektÃ¶r Boyutu: 300
# Dosya Boyutu: ~1.5 GB
# Google tarafÄ±ndan yayÄ±nlanan bu model, Ä°ngilizce haber metinleri Ã¼zerinde eÄŸitilmiÅŸ. Hem kelimeler hem de bazÄ± Ã§ok sÃ¶zcÃ¼klÃ¼ ifadeler (multi-word expressions) iÃ§erir.

# ğŸ”¹ FastText (wiki-news-300d-1M-subword.vec.zip)
# Veri KÃ¼mesi:
#     Wikipedia 2017
#     UMBC webbase corpus
#     statmt.org haber veri seti
#     (toplam: 16 milyar kelime)
# Kelime SayÄ±sÄ±: 1 milyon
# VektÃ¶r Boyutu: 300
# FastText, kelime iÃ§i alt-birimleri (subword units) de kullandÄ±ÄŸÄ± iÃ§in nadir veya gÃ¶rÃ¼lmemiÅŸ kelimelere bile vektÃ¶r atayabilir. 
# Bu da onu Ã¶zellikle dÃ¼ÅŸÃ¼k kaynaklÄ± veya tÃ¼retilmiÅŸ kelimelerde avantajlÄ± kÄ±lar.

# ----------------------------------------------
# 2. Model yollarÄ± ve binary ayarlarÄ±
# ----------------------------------------------

# ### glove.42B.300d.txt dosyasÄ±nÄ± dÃ¶nÃ¼ÅŸtÃ¼rme (sadece 1 kez Ã§alÄ±ÅŸtÄ±r)
# from gensim.scripts.glove2word2vec import glove2word2vec

# # Orijinal GloVe dosyan
# glove_input_file = "5-Word Embeddings/models/glove.42B.300d.txt"

# # OluÅŸturulacak Word2Vec uyumlu dosya (bu yeni dosya olacak)
# word2vec_output_file = "5-Word Embeddings/models/glove.42B.300d.word2vec.txt"

# # DÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlemi
# glove2word2vec(glove_input_file, word2vec_output_file)

# print("DÃ¶nÃ¼ÅŸtÃ¼rme tamamlandÄ±.")
# ### glove.42B.300d.txt dosyasÄ±nÄ± dÃ¶nÃ¼ÅŸtÃ¼rme (sadece 1 kez Ã§alÄ±ÅŸtÄ±r) sonu


model_paths = {
    'word2vec': "5-Word Embeddings/models/GoogleNews-vectors-negative300.bin",
    'glove': "5-Word Embeddings/models/glove.42B.300d.word2vec.txt",  # <-- dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ dosya!
    'fasttext': "5-Word Embeddings/models/wiki-news-300d-1M-subword.vec"
}

model_binary = {
    'word2vec': True,
    'glove': False,
    'fasttext': False
}

# ----------------------------------------------
# 3. SeÃ§ilen kelime gÃ¶mme modelinin yÃ¼klenmesi
# ----------------------------------------------
print(f"\n{model_name} modeli yÃ¼kleniyor...")
model = KeyedVectors.load_word2vec_format(model_paths[model_name], binary=model_binary[model_name])
print(f"{model_name} modeli baÅŸarÄ±yla yÃ¼klendi.\n")


# ----------------------------------------------
# 4. Veri setinin yÃ¼klenmesi
# ----------------------------------------------

# # Veri, anlamver-final.csv dosyasÄ±ndan pandas ile yÃ¼klenir.
# df = pd.read_csv("5-Word Embeddings/models/dataset/anlamver-final.csv", delimiter=";", encoding="ISO-8859-9", decimal=",")
# #print(df.head()) 

# # DosyayÄ± dÃ¼zenle ve yeni bir adla kaydet (Ã¶rneÄŸin '_duzenlenmis' eki ile)
# df.to_csv("5-Word Embeddings/dataset/anlamver_final_duzenlenmis.csv", 
#           index=False, 
#           encoding="utf-8",  # veya "ISO-8859-9"
#           sep=";")
       

# Veri, anlamver-final.csv dosyasÄ±ndan pandas ile yÃ¼klenir.
df = pd.read_csv("5-Word Embeddings/dataset/anlamver-final.csv", delimiter=";", encoding="ISO-8859-9", decimal=",")
#print(df.head()) 


# ----------------------------------------------
# 5. Bos listelerin oluÅŸturulmasÄ± ve skorlarÄ±n hesaplanmasÄ±
# ----------------------------------------------


# Her kelime gÃ¶mme modelinin tahmin ettiÄŸi benzerlik skorlarÄ± ve anlamver veri setindeki gerÃ§ek anotasyonlar iÃ§in boÅŸ listeler oluÅŸturulur.

actual_sim_scores, actual_rel_scores = [], []   # anlamver veri setindeki benzerlik ve iliÅŸiklilik skorlarÄ±nÄ±n listelenmesi
predicted_sim_scores = []                       # kelime gÃ¶mme modelinin tahmin ettiÄŸi benzerlik skorlarÄ±
w1_list, w2_list = [], []                       # Anlamver veri setindeki kelime Ã§iftleri
in_vocab_pairs = []                             # Modelde bulunan kelime Ã§iftlerinin listelenmesi
missing = 0                                     # Modelde bulunmayan kelime Ã§iftlerinin sayÄ±sÄ±


# Anlamver veri setindeki kelime Ã§iftlerinin seÃ§ilen kelime gÃ¶mme modeli tarafÄ±ndan iÅŸlenmesi
for _, row in df.iterrows():
    word1, word2 = row["W1"], row["W2"]
    
    if word1 in model and word2 in model:
        sim_score = model.similarity(word1, word2) # kelime gÃ¶mme modelinin, kelime Ã§ifti arasÄ±ndaki cosinus benzerliÄŸini hesaplamasÄ±
        predicted_sim_scores.append(sim_score)     # benzerlik skorlarÄ±nÄ±n listeye eklenmesi
        actual_sim_scores.append(row["Sim"])       # anlamver veri setindeki kelime Ã§iftleri arsÄ±ndaki benzerlik skorunun listeye eklenmesi
        actual_rel_scores.append(row["Rel"])       # anlamver veri setindeki kelime Ã§iftleri arsÄ±ndaki iliÅŸiklilik skorunun listeye eklenmesi
        w1_list.append(word1)                      # anlamver veri setindeki kelime Ã§iftlerinden 1.sinin listeye eklenmesi (kelime gÃ¶mme modelinde varsa)
        w2_list.append(word2)                      # anlamver veri setindeki kelime Ã§iftlerinden 2.sinin listeye eklenmesi (kelime gÃ¶mme modelinde varsa)
        in_vocab_pairs.append((word1, word2))      # kelime gÃ¶mme modelinde bulunan kelime Ã§iftlerinin listeye eklenmesi
    else:
        missing += 1

# ----------------------------------------------
# 6. DataFrame oluÅŸtur (kelime Ã§ifti, model tahmini ve gerÃ§ek skorlarÄ±n bir araya getirilmesi)
# ----------------------------------------------
df_results = pd.DataFrame({
    "W1": w1_list,
    "W2": w2_list,
    "Actual_Sim": actual_sim_scores,
    "Actual_Rel": actual_rel_scores,
    f"{model_name}_Sim": predicted_sim_scores,
})


# ----------------------------------------------
# 7. Ã‡Ä±ktÄ±larÄ± yazdÄ±r
# ----------------------------------------------
print(f"\nToplam: {len(in_vocab_pairs)} kelime Ã§ifti bulundu.")
print(f"\n{model_name} modelinde bulunan kelime Ã§iftleri:")
# for pair in in_vocab_pairs:
#     print(pair)

print(f"\nModelde olmayan kelime Ã§iftleri sayÄ±sÄ±: {missing}")

print(f"\n\nModelde bulunan kelime Ã§iftleri - Benzerlik ve Ä°liÅŸiklilik deÄŸerleri\n")
print(df_results[["W1", "W2", "Actual_Sim", "Actual_Rel"]].to_string(index=False))
#print(df_results[["W1", "W2", "Actual_Sim", "Actual_Rel", "{model_name}_Sim"]].to_string(index=False))

# ----------------------------------------------
# 8. Spearman Korelasyon Hesapla
# ----------------------------------------------
print('\nSpearman korelasyonu ile kelime gÃ¶mme modeli tahmini ve insan anatasyonlarÄ±nÄ±n karsÄ±lastÄ±rÄ±lmasÄ±:')

correlation_sim, _ = spearmanr(df_results["Actual_Sim"], df_results[f"{model_name}_Sim"])
print(f"\n Comparison of similarity scores between {model_name} and (Sim) with Spearman Correlation:", correlation_sim)

correlation_rel, _ = spearmanr(df_results["Actual_Rel"], df_results[f"{model_name}_Sim"])
print(f"\n Comparison of similarity scores between {model_name} and (Rel) with Spearman Correlation:", correlation_rel)


# ----------------------------------------------
# 9. Ã‡Ä±ktÄ±larÄ±n yorumlanmasÄ±:
# ----------------------------------------------


# Word2Vec modelinin Ã§Ä±ktÄ±sÄ±na bakÄ±ldÄ±ÄŸÄ±nda:
    # Kelime Ã‡iftleri: YalnÄ±zca 2 kelime Ã§ifti Ã¼zerinde iÅŸlem yapÄ±labilmiÅŸ, bu da modelin sÄ±nÄ±rlÄ± bir veri setiyle Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± gÃ¶steriyor.
    # Benzerlik SkorlarÄ±: 2 kelime Ã§ifti iÃ§in benzerlik deÄŸerleri verilmiÅŸ ancak bu Ã§ok kÃ¼Ã§Ã¼k bir Ã¶rnekle sÄ±nÄ±rlÄ± olduÄŸu iÃ§in gÃ¼venilirlik dÃ¼ÅŸÃ¼k.
    # Spearman Korelasyon: Benzerlik skorlarÄ± iÃ§in mÃ¼kemmel bir korelasyon (1.0) gÃ¶zlemlenmiÅŸ, 
    #   ancak sadece 2 kelime Ã§ifti Ã¼zerinden yapÄ±lan deÄŸerlendirme, genellenebilir bir sonuÃ§ elde etmeyi zorlaÅŸtÄ±rÄ±yor.
    # Ä°liÅŸkililik SkorlarÄ±: Yetersiz veri yÃ¼zÃ¼nden iliÅŸkililik skorlarÄ± hesaplanamÄ±yor (nan), 
    #   bu da modelin Ã§ok sÄ±nÄ±rlÄ± bir veri kÃ¼mesiyle Ã§alÄ±ÅŸmasÄ±ndan kaynaklanÄ±yor.
    # Ã–zetle, modelin deÄŸerlendirmesi kÃ¼Ã§Ã¼k bir veri setine dayandÄ±ÄŸÄ± iÃ§in sonuÃ§lar genellenebilir deÄŸil.


# GloVe modelinin Spearman korelasyon deÄŸerleri dÃ¼ÅŸÃ¼k Ã§Ä±kmÄ±ÅŸ:
    # Benzerlik (Sim) Korelasyonu: 0.076 â€“ Model, insan anotasyonlarÄ±yla benzerlik sÄ±ralamalarÄ±nda Ã§ok uyumlu deÄŸil.
    # Ä°liÅŸkililik (Rel) Korelasyonu: 0.188 â€“ Model, iliÅŸkilik sÄ±ralamalarÄ±nda biraz daha uyumlu, ancak hala dÃ¼ÅŸÃ¼k.
    # Ã–zetle, GloVe modeli, insan benzerlik ve iliÅŸkilik sÄ±ralamalarÄ±nÄ± tahmin etmede yeterince baÅŸarÄ±lÄ± olmamÄ±ÅŸ.


# FastText modelinin Ã§Ä±ktÄ±sÄ±na gÃ¶re:
    # Benzerlik (Sim) SkorlarÄ±: Modelin tahmin ettiÄŸi sÄ±ralamalar, insan anotasyonlarÄ±yla ters yÃ¶nde, yani negatif korelasyon (-0.21).
    # Ä°liÅŸkililik (Rel) SkorlarÄ±: Modelin tahminleri ile insan anotasyonlarÄ± arasÄ±nda zayÄ±f bir pozitif iliÅŸki var (0.21).
    # Ã–zetle, FastText modelinin benzerlik tahminleri zayÄ±f ve yanlÄ±ÅŸ sÄ±ralama yapÄ±yor, ancak iliÅŸkililik tahminleri kÄ±smen doÄŸru.